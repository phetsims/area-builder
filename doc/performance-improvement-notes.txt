This document is mostly for an internal development record.  It captures notes
on the effort to improve performance prior to publication.

9/3/2014

Published version 1.0.0.dev.16 as a performance baseline.  The main issues at
this point are:
1. Animation for showing solutions for 'built it' style game challenges is a
bit chunky in high performance environments (Win7 + Chrome 37) and intolerably
slow in lower-performance environments, such as on iPad 2.
2. Dragging of single squares gets progressively slower as more shapes are
added to the board on some platforms.  The effect is not nearly as bad on
Win7+Chrome or Win7 + IE - in fact it's hard to even notice, but it can be
seen on Win7+Firefox.  On OSX on a Macbook Pro (Dirac was the actual machine I
used to test it), the effect wasn't noticeable on Chrome, but was definitely
there on Safari. The test is to go to the first screen, build a 3x3 stack of
shapes in the lower right corner, then pull a shape from the bucket and
release it at the upper left corner of the board.

Three trials of showing solution for area of 36, no query parameters, version 1.0.0-dev.16, requireJS version, grid and
dimensions turned off:
trial #1: 1565.4 ms in animationLoop
trial #2: 1468.5 ms in animationLoop
trial #3: 1441.6 ms in animationLoop
avg: 1497.8

When I drill down in this, it looks like a lot of time is being spent in PerimeterShapeNode.update, and much of the time
in that function is spent creating and adding the text, almost certainly for the dimensions indicators.

Experiment: Try just not having the dimensions indicators at all, see how the performance improves qualitatively and
quantitatively.
Result: It is decidedly smoother on Win7+Chrome.  Better on iPad, but not great.  Might be acceptable.
trial #1: 968.2 ms in animationLoop
trial #2: 905.9 ms in animationLoop
trial #3: 922.4 ms in animationLoop
avg: 932.2
~38% improvement by not having dimension labels at all (which, of course, we can't do)

First optimization (easy one) a fixed font instead of recreating each time.
trial #1: 1316.5 ms in animationLoop
trial #2: 1235.3 ms in animationLoop
trial #3: 1280.2 ms in animationLoop
avg: 1277.3
~15% improvement over original

Second optimization: Have a pool of text nodes whose value and visibility is set instead of adding/removing nodes with
each update.
trial #1: 1041.0 ms in animationLoop
trial #2: 927.8 ms in animationLoop
trial #3: 954.7 ms in animationLoop
avg: 974.5 ms
~35% improvement total
This is great - almost as much as getting rid of the feature altogether.  I'm psyched.








